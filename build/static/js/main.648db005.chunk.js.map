{"version":3,"sources":["components/dashboard.module.css","components/DayList.js","components/Dashboard.js","store/actions/Allactions.js","store/actions/FetchActon.js","App.js","reportWebVitals.js","store/reducers/reducerWeather.js","store/reducers/CombineReducers.js","store.js","index.js"],"names":["module","exports","DayList","data","useSelector","state","reducerWeather","Days","React","useMemo","list","filter","v","i","a","findIndex","t","dt_txt","substr","slice","getInfo","el","map","push","MaxMin","Math","round","reduce","curr","next","main","length","getImg","WeekDays","Date","getDay","mainData","className","style","container","weekName","src","weather","icon","alt","degree","minTemp","humid","Dashboard","header","allAction","FetchActon","setData","type","payload","App","dispatch","useDispatch","useEffect","axios","get","then","res","catch","err","console","log","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","rootReducer","combineReducers","action","middleware","applyMiddleware","thunk","createLogger","store","compose","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.648db005.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"dashboard_header__PtqJQ\",\"container\":\"dashboard_container__2vKBI\",\"weekName\":\"dashboard_weekName__8X_EH\",\"degree\":\"dashboard_degree__3OrRE\",\"minTemp\":\"dashboard_minTemp__ETIPJ\",\"humid\":\"dashboard_humid__lXmRc\"};","import React from 'react';\r\nimport {useSelector} from \"react-redux\";\r\nimport style from './dashboard.module.css';\r\n\r\nexport default function DayList() {\r\n   const data = useSelector(state => state.reducerWeather.data)\r\n\r\n   const Days = React.useMemo(() => {\r\n      const grouped = data.list.filter((v, i, a) => a.findIndex(t => (t.dt_txt.substr(0, 10) === v.dt_txt.substr(0, 10))) === i).slice(0, 5);\r\n      return grouped\r\n   }, [])\r\n\r\n   const getInfo = (el) => {\r\n      let a = [];\r\n      data.list.map(v => {\r\n         switch (true) {\r\n            case v.dt_txt.substr(0, 10) === el:\r\n               return a.push(v);\r\n         }\r\n      })\r\n      return a\r\n   }\r\n\r\n   const MaxMin = (v, i) => Math.round(getInfo(v).reduce((curr, next) => curr + next.main[i], 0) / getInfo(v).length);\r\n\r\n   const getImg = data => `https://openweathermap.org/img/w/${data}.png`;\r\n\r\n   const WeekDays = (data) => {\r\n      let num = new Date(data).getDay();\r\n      const days = [\"Воскресенье\", \"Понедельник\", \"Вторник\", \"Среда\", \"Четверг\", \"Пятница\", \"Суббота\"];\r\n      return days[num];\r\n   }\r\n   const mainData = Days;\r\n   \r\n   return (\r\n      <div>\r\n         {mainData.map(v =>\r\n            <div className={style.container}>\r\n               <div className={style.weekName}>\r\n                  <img src={getImg(v.weather[0].icon)} alt=\"\"/>\r\n                  <p>{WeekDays(v.dt_txt.substr(0, 10))}</p>\r\n               </div>\r\n               <div className={style.degree}>\r\n                  {MaxMin(v.dt_txt.substr(0, 10), \"temp_max\")}°C/<span\r\n                  className={style.minTemp}>{MaxMin(v.dt_txt.substr(0, 10), \"temp_min\")}°C</span>\r\n               </div>\r\n               <div className={style.humid}>\r\n                  Влажность: {MaxMin(v.dt_txt.substr(0, 10), \"humidity\")}%\r\n               </div>\r\n            </div>\r\n         )}\r\n      </div>\r\n   )\r\n}","import React from 'react';\r\nimport style from './dashboard.module.css';\r\nimport DayList from \"./DayList\";\r\n\r\nexport default function Dashboard() {\r\n   return (\r\n      <div>\r\n         <p className={style.header}>ПРОГНОЗ ПОГОДЫ НА 5 ДНЕЙ</p>\r\n         <DayList/>\r\n      </div>\r\n   )\r\n}","import FetchActon from \"./FetchActon\";\r\n\r\nconst allAction = {\r\n   FetchActon\r\n}\r\n\r\nexport default allAction;","const setData = data => ({\r\n   type: 'FETCH_DATA',\r\n   payload: data\r\n})\r\n\r\nexport default {\r\n   setData\r\n}","import React from 'react';\nimport './App.css';\nimport Dashboard from \"./components/Dashboard\";\nimport './App.css';\nimport axios from \"axios\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport allAction from \"./store/actions/Allactions\";\n\nfunction App() {\n   const dispatch = useDispatch();\n   const data = useSelector(state => state.reducerWeather.data)\n   React.useEffect(() => {\n      // navigator.geolocation ?\n      //    navigator.geolocation.getCurrentPosition(function (position) {\n      //       coorsRef.current = {lat: position.coords.latitude, long: position.coords.latitude}\n      //    }) : coorsRef.current = {err: 'error fetching location'}\n\n      axios.get('https://api.openweathermap.org/data/2.5/forecast?q=Toshkent&units=metric&lang=ru&appid=34a6e040345b5f6a4eead966b144aee7')\n         .then((res) => {\n            dispatch(allAction.FetchActon.setData(res.data));\n         })\n         .catch((err) => {\n            console.log(err)\n         })\n   }, [])\n\n   return (\n      data.length !== 0 ?\n         <div>\n            <Dashboard/>\n         </div>\n         : ''\n   );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const initialState = {\r\n   data: []\r\n}\r\n\r\nexport default (state = initialState, action) => {\r\n   switch (action.type) {\r\n      case 'FETCH_DATA':\r\n         return {\r\n            ...state, data: action.payload\r\n         }\r\n   }\r\n   return state;\r\n}","import {combineReducers} from 'redux';\r\nimport reducerWeather from \"./reducerWeather\";\r\n\r\nexport const rootReducer = combineReducers({\r\n   reducerWeather\r\n})","\r\nimport { compose, applyMiddleware, createStore } from \"redux\";\r\nimport { createLogger } from \"redux-logger\";\r\n\r\nimport thunk from \"redux-thunk\";\r\nimport {rootReducer} from \"./store/reducers/CombineReducers\";\r\n\r\nconst middleware = applyMiddleware(thunk, createLogger());\r\nconst store = compose(createStore)(rootReducer, middleware);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}